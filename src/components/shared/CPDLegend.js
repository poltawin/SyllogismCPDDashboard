// Collection of UI improvement utilities and components

// 1. Legend Component for CPD Connector Types
// src/components/shared/CPDLegend.js

import React from "react";

export const CPDLegend = () => {
  const styles = {
    container: {
      display: "flex",
      gap: "24px",
      padding: "12px 16px",
      backgroundColor: "#f9fafb",
      borderRadius: "4px",
      border: "1px solid #d1d5db",
      fontSize: "0.875rem",
      justifyContent: "center",
      alignItems: "center",
    },
    item: {
      display: "flex",
      alignItems: "center",
      gap: "8px",
    },
    line: {
      width: "40px",
      height: "3px",
    },
    solidLine: {
      backgroundColor: "#059669",
    },
    dashedLine: {
      backgroundImage:
        "linear-gradient(to right, #dc2626 60%, transparent 60%)",
      backgroundSize: "8px 3px",
      backgroundRepeat: "repeat-x",
    },
    doubleLine: {
      borderTop: "1.5px solid #6b7280",
      borderBottom: "1.5px solid #6b7280",
      height: "4px",
    },
    label: {
      color: "#374151",
      fontWeight: "500",
    },
  };

  return (
    <div style={styles.container}>
      <div style={styles.item}>
        <div style={{ ...styles.line, ...styles.solidLine }} />
        <span style={styles.label}>Some (at least one)</span>
      </div>
      <div style={styles.item}>
        <div style={{ ...styles.line, ...styles.dashedLine }} />
        <span style={styles.label}>None (empty set)</span>
      </div>
      <div style={styles.item}>
        <div style={{ ...styles.line, ...styles.doubleLine }} />
        <span style={styles.label}>No-info (unknown)</span>
      </div>
    </div>
  );
};

// 2. Figure Selection with Visual Guide
// src/components/FigureSelector.js

export const FigureSelector = ({ value, onChange }) => {
  const figures = [
    {
      value: "1",
      label: "Figure 1",
      structure: "M-P, S-M",
      description: "Standard",
    },
    {
      value: "2",
      label: "Figure 2",
      structure: "P-M, S-M",
      description: "Inverted major",
    },
    {
      value: "3",
      label: "Figure 3",
      structure: "M-P, M-S",
      description: "Inverted minor",
    },
    {
      value: "4",
      label: "Figure 4",
      structure: "P-M, M-S",
      description: "Both inverted",
    },
  ];

  const styles = {
    container: {
      display: "grid",
      gridTemplateColumns: "repeat(4, 1fr)",
      gap: "8px",
    },
    button: (isSelected) => ({
      padding: "12px 8px",
      border: `2px solid ${isSelected ? "#3b82f6" : "#d1d5db"}`,
      borderRadius: "4px",
      backgroundColor: isSelected ? "#eff6ff" : "white",
      cursor: "pointer",
      textAlign: "center",
      transition: "all 0.2s",
    }),
    label: {
      fontSize: "0.875rem",
      fontWeight: "600",
      marginBottom: "4px",
      color: "#374151",
    },
    structure: {
      fontSize: "0.75rem",
      color: "#6b7280",
      fontFamily: "monospace",
    },
  };

  return (
    <div style={styles.container}>
      {figures.map((fig) => (
        <button
          key={fig.value}
          style={styles.button(value === fig.value)}
          onClick={() => onChange(fig.value)}
        >
          <div style={styles.label}>{fig.label}</div>
          <div style={styles.structure}>{fig.structure}</div>
        </button>
      ))}
    </div>
  );
};

// 3. Export/Share Functionality
// src/utils/exportHelpers.js

export const exportSyllogismAsText = (
  terms,
  major,
  minor,
  conclusion,
  validity,
  syllogismName
) => {
  return `
SYLLOGISM ANALYSIS
==================

Terms:
- Subject (S): ${terms.S}
- Predicate (P): ${terms.P}
- Middle (M): ${terms.M}

Premises:
- Major: ${major.text} (${major.quality} ${major.quantity})
- Minor: ${minor.text} (${minor.quality} ${minor.quantity})

Conclusion:
- ${conclusion.text} (${conclusion.quality} ${conclusion.quantity})

Validity: ${validity ? "VALID" : "INVALID"}
${validity ? `Syllogism Name: ${syllogismName}` : ""}

Generated by CPD Syllogism Dashboard
`.trim();
};

export const exportSyllogismAsJSON = (state) => {
  return JSON.stringify(state, null, 2);
};

// 4. Keyboard Shortcuts Component
// src/components/KeyboardShortcuts.js

export const KeyboardShortcuts = ({ onClear, onHint }) => {
  React.useEffect(() => {
    const handleKeyPress = (e) => {
      // Ctrl/Cmd + R: Clear
      if ((e.ctrlKey || e.metaKey) && e.key === "r") {
        e.preventDefault();
        onClear();
      }
      // Ctrl/Cmd + H: Toggle hint
      if ((e.ctrlKey || e.metaKey) && e.key === "h") {
        e.preventDefault();
        onHint();
      }
    };

    window.addEventListener("keydown", handleKeyPress);
    return () => window.removeEventListener("keydown", handleKeyPress);
  }, [onClear, onHint]);

  return null; // This is a behavior component, no UI
};

// 5. Loading State Component
// src/components/shared/LoadingSpinner.js

export const LoadingSpinner = () => {
  const styles = {
    container: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      padding: "40px",
    },
    spinner: {
      width: "40px",
      height: "40px",
      border: "4px solid #e5e7eb",
      borderTop: "4px solid #3b82f6",
      borderRadius: "50%",
      animation: "spin 1s linear infinite",
    },
  };

  return (
    <div style={styles.container}>
      <div style={styles.spinner} />
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  );
};
